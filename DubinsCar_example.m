time_horizon = 30;
init_heading = pi/4;
sampling_time = 0.1;
box_halflength = 0.5;
omega = pi/time_horizon/sampling_time/2;
turning_rate = omega*ones(time_horizon,1);
dist_cov = 0.01;
no_of_direction_vectors_ccc = 10;
probability_threshold_of_interest = 0.8;

%% LTV system definition
[sys, heading_vec] = getDubinsCarLtv('add-dist',...
turning_rate,...
init_heading,...
sampling_time,...
Polyhedron('lb',0,'ub',5),...
eye(2),...
RandomVector('Gaussian',zeros(2,1), dist_cov * eye(2)));

target_tube_cell = cell(time_horizon + 1,1);

%% Target tube definition
figure(100);clf;hold on
for itt=0:time_horizon
    center_box = -5 * [cos(heading_vec(itt+1)+pi/2)-cos(init_heading+pi/2);
                       sin(heading_vec(itt+1)+pi/2)-sin(init_heading+pi/2)];
    target_tube_cell{itt+1} = Polyhedron('lb',center_box - box_halflength, 'ub', center_box + box_halflength);
    plot(target_tube_cell{itt+1},'alpha',0.5);
end
axis equal
% axis([-5 5 -5 5])
target_tube = TargetTube(target_tube_cell{:});

%% Set of direction vectors
theta_vector_ccc = linspace(0, 2*pi, no_of_direction_vectors_ccc+1);
theta_vector_ccc = theta_vector_ccc(1:end-1);
set_of_direction_vectors_ccc = [cos(theta_vector_ccc); 
                                sin(theta_vector_ccc)];
disp('Chance constrained approach');
timer_polytope_ccc = tic;
[underapproximate_stochastic_reach_avoid_polytope_ccc,...
 optimal_input_vector_at_boundary_points_ccc,...
 xmax_ccc,...
 optimal_input_vector_for_xmax_ccc,...
 maximum_underapproximate_reach_avoid_probability_ccc,...
 optimal_theta_i_ccc,...
 optimal_reachAvoid_i_ccc,...
 vertex_poly_ccc,...
 R] = getUnderapproxStochReachAvoidSet(...
    sys, ...
    target_tube, ...
    [], ...
    probability_threshold_of_interest, ...
    set_of_direction_vectors_ccc,...
    'ccc');
elapsed_time_polytope_ccc = toc(timer_polytope_ccc);
fprintf('Time taken for computing the polytope (CCC): %1.3f s\n', elapsed_time_polytope_ccc);
